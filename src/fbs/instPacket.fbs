
namespace NNFramework;

/// Instruction OP code definitions
enum OpCode : ubyte {
    MemAlloc,
    Input,
    Convolution,
    Relu,
    Pooling,
    FullyConnected,
    Scale,
    Concat,
    Softmax,
    Output,
    MemFree
}


union OpInfo {
    MemAlloc,
    Input,
    Conv,
    Relu,
    Pooling,
    FC,
    Scale,
    Concat,
    Softmax,
    Output,
    MemFree
}


table Instruction {
    opcode:OpCode;
    operand:OpInfo;
}


table TileInfo {
    addr:ulong;
    tsize:[int];
}


/// Operand info of each instruction (kernel)
table MemAlloc {
    kernel_name: string;     // only for DEBUG
    total_buff_size:ulong;
}

table MemFree {
    kernel_name: string;     // only for DEBUG
}

table Input {
    kernel_name: string;     // only for DEBUG
    otile:[TileInfo];
}

table Output {
    kernel_name: string;     // only for DEBUG
    itile:[TileInfo];
}

table Conv {
    kernel_name:string;     // only for DEBUG
    kernel_size_w:int;
    kernel_size_h:int;
    stride_size_w:int;
    stride_size_h:int;
    pad_size_w:int;
    pad_size_h:int;
    relu_op_en:bool;
    weight:[float];
    bias:[float];
    itile:[TileInfo];
    otile:[TileInfo];
}

table Relu {
    kernel_name: string;     // only for DEBUG
    itile:[TileInfo];
    otile:[TileInfo];
}

table Pooling {
    kernel_name:string;     // only for DEBUG
    kernel_size_w:int;
    kernel_size_h:int;
    stride_size_w:int;
    stride_size_h:int;
    pad_size_w:int;
    pad_size_h:int;
    global_pooling:bool;
    oper_type:int;
    itile:[TileInfo];
    otile:[TileInfo];
}

table FC {
    kernel_name:string;     // only for DEBUG
    weight:[float];
    bias:[float];
    itile:[TileInfo];
    otile:[TileInfo];
}

table Softmax {
    kernel_name:string;     // only for DEBUG
    itile:[TileInfo];
    otile:[TileInfo];
}
 
table Scale {
    kernel_name:string;     // only for DEBUG
    weight:[float];
    bias:[float];
    itile:[TileInfo];
    otile:[TileInfo];
}
 
table Concat {
    kernel_name:string;     // only for DEBUG
    itile:[TileInfo];
    otile:[TileInfo];
}
 
/// root table definition
table InstPacket {
    packet:[Instruction];
}

root_type InstPacket;
